#
# Convenience functions for git. Includes:
# - aliases for common git commands
# - a system for referencing git branches by git number
# - the ability to attach a pivotal story id to a git branch so the id gets appended to every commit
#
# Installation:
# 1. add the code below to your .bashrc
#
# Usage:
# gb                                    -- list git branches (with branch nums and pivotal story ids)
# gnb <BRANCH_NAME> <PIVOTAL_STORY_ID>  -- new branch
# gset <BRANCH_NUM> <PIVOTAL_STORY_ID>  -- attach a pivotal story id to an existing branch
# gch <BRANCH_NUM>                      -- checkout the specified branch
# grb <BRANCH_NUM>                      -- remove branch locally and remotely (prompted for each)
# gs                                    -- git status
# gd                                    -- git diff
# ga                                    -- git add
# gcm <MESSAGE>                         -- git commit
# gpl                                   -- git pull origin the current branch
# gp                                    -- git push
# gclean                                -- list all local branches in sync with main branch with prompt to remove
#

DEFAULT_BRANCHES="is_engine: develop,"

recho() {
    echo -e "\e[01;31m$@\e[00m";
}

gb() {
    recho "==> `get_repo`/branches"
    show_branches
}

gclean() {
    local mainbranch="`get_main_branch`"
    recho "==> finding branches consistent with `get_repo`/$mainbranch"
    git checkout --quiet $mainbranch > /dev/null
    git pull --quiet origin $mainbranch > /dev/null
    local all_branches="`git branch | grep -v "\*"`"
    local bad_branches=""
    local current_branch=0
    local num_branches="`echo $all_branches | wc -w`"

    for branch in `git branch | grep -v "\*"`; do
        percent_complete=`echo "scale=2; ($current_branch/$num_branches)*100" | bc | sed -e "s:\..*$::"`
        echo -ne "($percent_complete% complete) checking ${branch}...                   \r"

        git checkout --quiet $branch > /dev/null
        git pull --quiet origin $mainbranch > /dev/null
        if [ "`git diff $mainbranch`" == "" ]; then
            local bad_branches="`echo $bad_branches` $branch"
            echo -ne "$branch                                                                       \n"
        fi
        git reset --quiet --hard > /dev/null

        current_branch=$(($current_branch + 1))
    done

    git checkout --quiet $mainbranch > /dev/null

    echo -ne "Are you sure you want to remove these branches locally? [y/N] "
    read confirm
    if [ "$confirm" == "y" ] || [ "$confirm" == "Y" ]; then
        recho "==> deleting branches consistent with `get_repo`/$mainbranch"
        echo $bad_branches | xargs -n 1 git branch -D
    fi
}

gnb() {
    if [ "$1" != "" ]; then
        if [ "$2" != "" ]; then
            recho "==> creating branch `get_repo`/$1 for story $2"
        else
            recho "==> creating branch `get_repo`/$1"
        fi
        git checkout -b "$1"

        if [ "$2" != "" ]; then
            echo "$1:$2" >> ~/.git-pivotal
        fi
        show_branches
    else
        recho "You forgot to specify a branch!"
    fi
}

gset() {
    if [ "$1" != "" ]; then
        local branchname="`get_branch_name ${1}`"
        if [ "$2" != "" ]; then
            echo "$branchname:$2" >> ~/.git-pivotal
            show_branches
        else
            recho "You forgot to specify a story id!"
        fi
    else
        recho "You forgot to specify a branch!"
    fi
}

gch() {
    if [ "$1" != "" ]; then
        local branchname="`get_branch_name ${1}`"
        git show-ref --verify --quiet refs/heads/"$branchname"
        if [[ $? != 0 ]]; then
            recho "==> fetching branches for `get_repo`"
            git fetch
        fi
        recho "==> checking out branch `get_repo`/$branchname"
        git checkout "$branchname"
        show_branches
    else
        recho "You forgot to specify a branch!"
    fi
}

grb() {
    if [ "$1" != "" ]; then
        local branchname="`get_branch_name ${1}`"
        echo -ne "Are you sure you want to delete local branch `get_repo`/$branchname? [y/N] "
        read confirm
        if [ "$confirm" == "y" ] || [ "$confirm" == "Y" ]; then
            recho "==> deleting local branch `get_repo`/$branchname"
            git branch -D "$branchname"
            show_branches
        fi
        echo -ne "Are you sure you want to delete remote branch `get_repo`/$branchname? [y/N] "
        read confirm
        if [ "$confirm" == "y" ] || [ "$confirm" == "Y" ]; then
            recho "==> deleting remote branch `get_repo`/$branchname"
            git push origin ":$branchname"
        fi
    else
        recho "You forgot to specify a branch!"
    fi
}

gs() {
    recho "==> status"
    git status
}

gd() {
    if [ "$1" != "" ]; then
        local branch="`get_branch_name ${1}`"
        recho "==> diff `get_branch` <-> $branch"
        git diff --color $branch
    else
        recho "==> diff"
        git diff --color
    fi
}

ga() {
    recho "==> adding $1"
    git add -A "$1"
    git status
}

gcm() {
    local branch=`get_branch`
    local storyid="`get_story_id_for_branch $branch`"

    if [ "$1" != "" ]; then
        if [ "$storyid" != "" ]; then
            recho "==> committing for story #$storyid"
            git commit -m "$1 [#$storyid]"
        else
            recho "==> committing"
            git commit -m "$1"
        fi
    else
        recho "You forgot the commit message!"
    fi
}

gpl() {
    if [ "$1" != "" ]; then
        local branch="`get_branch_name ${1}`"
    else
        local branch="`get_main_branch`"
    fi
    recho "==> pulling from `get_repo`/$branch"
    git pull origin "$branch"
}

gp() {
    recho "==> pushing to `get_repo`/`get_branch`"
    git push origin "`get_branch`"
}

gblame() {
    if [ "$1" == "" ] || [ "$2" == "" ]; then
        echo "Usage: gblame <FILE> <GREP> <COMMITS_BACK> <START_COMMIT>"
    else
        if [ "$4" == "" ]; then
            commit="none"
        else
            commit="$4"
        fi
        if [ "$3" == "" ]; then
            commits_back=10
        else
            commits_back=$3
        fi
        for i in `seq ${commits_back}`; do
            if [ "$commit" != "" ]; then
                echo $i
                if [ "$commit" == "none" ]; then
                    res="`git blame ${1} | grep ${2} | head -n1`"
                else
                    res="`git blame ${commit}~ -- ${1} | grep ${2} | head -n1`"
                fi
                echo $res
                commit="`echo $res | grep -o "^[^ ]*"`"
            fi
        done
    fi
}

# list branches with numbers next to each
show_branches() {
    local i=1
    git branch | while read line; do
        if [ "$line" != "*" ]; then
            local branch="`echo "$line" | sed -e "s:^* ::"`"
            local storyid="`get_story_id_for_branch $branch`"
            if [ "$storyid" == "" ]; then
                local storyid="--------"
            fi
            if [ "`echo "$line" | grep "^\*"`" != "" ]; then
                printf '\e[01;33m%-4s%-10s%s\e[00m\n' $i "$storyid" "$branch"
            else
                printf '%-4s%-10s%s\n' $i "$storyid" "$branch"
            fi

            local i=$(($i + 1))
        fi
    done
}

# get the name of the root dir for the current repo
get_repo() {
    local root="`git rev-parse --show-toplevel`"
    echo $root | grep -o "/[^/]*$" | sed -e "s:/::"
}

# get the name of the current branch
get_branch() {
    echo "`git branch | grep "\*" | sed -e "s:\* ::"`"
}

# get the name of the branch with the given number
get_branch_name() {
    local branchnum="`echo ${1} | grep "^[0-9][0-9]*$"`"
    if [ "$branchnum" != "" ]; then
        echo "`git branch | sed -n "${branchnum}p" | sed -e "s: ::g" | sed -e "s:*::" `"
    else
        echo "$1"
    fi
}

# get the default branch for the current repo
get_main_branch() {
    local b=$(echo $DEFAULT_BRANCHES | grep -o "`get_repo`: [^,]*" | grep -o "[^ ]*$")
    if [ "$b" != "" ]; then
        echo "$b"
    else
        echo "master"
    fi
}

get_story_id_for_clean_branch() {
    local branch="`echo "$1" | sed -e "s:^* ::"`"
    echo "`get_story_id_for_branch $branch`"
}

get_story_id_for_branch() {
    if [ -f ~/.git-pivotal ]; then
        local storyid=`cat ~/.git-pivotal | grep "^$1:" | tail -1 | sed -e "s/^[^:]*://"`
    else
        local storyid=""
    fi
    echo $storyid
}
